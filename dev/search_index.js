var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = StringAlgorithms","category":"page"},{"location":"#StringAlgorithms","page":"Home","title":"StringAlgorithms","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for StringAlgorithms.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [StringAlgorithms]","category":"page"},{"location":"#StringAlgorithms.PalindromicAutomaton-Union{Tuple{}, Tuple{T}} where T","page":"Home","title":"StringAlgorithms.PalindromicAutomaton","text":"Create an empty palindromic automaton of key type T.\n\nThe Palindromic AutoMaton (PAM, also known as the palindrome tree) is a very useful data structure for solving palindrome-related problems. A detailed introduction to PAM can be found via:\n\nWikipedia: Palindrome Tree\nOI-Wiki: 回文树\n\nTo add new values into the automaton, simply use Base.push!.\n\nGetters for the internal fields of the automaton are provided, including:\n\nchildren(pam): Get the children dictionary of the PAM.\nnodes(pam): Get the number of nodes in the PAM.\nlastnodeindex(pam): Get the index of the last node of the PAM.\nlen(pam, i): Get the palindrome length of the i-th node.\nfail(pam, i): Get the fail pointer of the i-th node.\ncnt(pam, i): Get the frequency count of the i-th node. \n\nSample usages\n\nFinding the length of the longest palindromic substring\n\nfunction longest_palindromic_substring(s)\n    pam = PalindromicAutomaton{Char}()\n    hi = 0\n    for ch in s\n        push!(pam, ch)\n        hi = max(hi, len(pam, lastnodeindex(pam)))\n    end\n    return hi\nend\n\nlongest_palindromic_substring(\"ddabababacc\")\n\n# output\n\n7\n\n\n\n\n\n","category":"method"}]
}
